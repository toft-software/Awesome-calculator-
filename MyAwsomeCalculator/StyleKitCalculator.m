//
//  StyleKitCalculator.m
//  ProjectName
//
//  Created by Christian Andersen on 10/10/2016.
//  Copyright (c) 2016 Snake-Apps. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitCalculator.h"


@implementation StyleKitCalculator

#pragma mark Cache

static UIImage* _imageOfMultiplypressed = nil;
static UIImage* _imageOfMuliplynormal = nil;
static UIImage* _imageOfDividepressed = nil;
static UIImage* _imageOfDividenormal = nil;
static UIImage* _imageOfAddPressed = nil;
static UIImage* _imageOfAddnormal = nil;
static UIImage* _imageOfMinusnormal = nil;
static UIImage* _imageOfMinusPressed = nil;
static UIImage* _imageOfOnepressed = nil;
static UIImage* _imageOfOnenormal = nil;
static UIImage* _imageOfTwonormal = nil;
static UIImage* _imageOfTwopressed = nil;
static UIImage* _imageOfThreepressed = nil;
static UIImage* _imageOfThreenormal = nil;
static UIImage* _imageOfFournormal = nil;
static UIImage* _imageOfFourpressed = nil;
static UIImage* _imageOfFivenormal = nil;
static UIImage* _imageOfFivepressed = nil;
static UIImage* _imageOfSixpressed = nil;
static UIImage* _imageOfSixnormal = nil;
static UIImage* _imageOfSevenpressed = nil;
static UIImage* _imageOfSevennormal = nil;
static UIImage* _imageOfEightpressed = nil;
static UIImage* _imageOfEightnormal = nil;
static UIImage* _imageOfNinepressed = nil;
static UIImage* _imageOfNinenormal = nil;
static UIImage* _imageOfZeronormal = nil;
static UIImage* _imageOfZeropressed = nil;
static UIImage* _imageOfCommanormal = nil;
static UIImage* _imageOfCommaPressed = nil;
static UIImage* _imageOfEqualpressed = nil;
static UIImage* _imageOfEqualnormal = nil;
static UIImage* _imageOfShakeMe = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawMultiplypressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"X";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawMuliplynormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"X";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawDividepressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(22, 11, 24, 35);
        {
            NSString* textContent = @"/";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawDividenormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(19, 8, 24, 35);
        {
            NSString* textContent = @"/";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawAddPressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 6, 24, 35);
        {
            NSString* textContent = @"+";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawAddnormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 5, 24, 35);
        {
            NSString* textContent = @"+";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawMinusnormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(20, 8, 24, 35);
        {
            NSString* textContent = @"-";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawMinusPressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(21, 10, 24, 35);
        {
            NSString* textContent = @"-";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawOnepressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
            [color setStroke];
            rectangle2Path.lineWidth = 1;
            [rectangle2Path stroke];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"1";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawOnenormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"1";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawTwonormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"2";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawTwopressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"2";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawThreepressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"3";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawThreenormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"3";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawFournormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"4";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawFourpressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"4";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawFivenormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"5";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawFivepressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"5";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawSixpressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"6";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawSixnormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"6";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawSevenpressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"7";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawSevennormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"7";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawEightpressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"8";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawEightnormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"8";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawNinepressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"9";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawNinenormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"9";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawZeronormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"0";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawZeropressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 0.788 blue: 0.255 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"0";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawCommanormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.106 green: 0.6 blue: 0.341 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color3 setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(20, 8, 24, 35);
        {
            NSString* textContent = @".";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawCommaPressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.106 green: 0.6 blue: 0.341 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color3 setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(21, 10, 24, 35);
        {
            NSString* textContent = @".";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawEqualpressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.239 green: 0.49 blue: 0.949 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 42, 42) cornerRadius: 8];
            [UIColor.redColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 3, 55, 52) cornerRadius: 8];
            [color2 setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 11, 24, 35);
        {
            NSString* textContent = @"=";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawEqualnormal
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.239 green: 0.49 blue: 0.949 alpha: 1];

    //// Group
    {
        //// Group 4
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 13, 55, 42) cornerRadius: 8];
            [UIColor.blackColor setFill];
            [rectanglePath fill];
        }
    }


    //// Group 2
    {
        //// Group 3
        {
            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 55, 51) cornerRadius: 8];
            [color2 setFill];
            [rectangle2Path fill];
        }


        //// Text Drawing
        CGRect textRect = CGRectMake(16, 8, 24, 35);
        {
            NSString* textContent = @"=";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 40], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawShakeMe
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 1 green: 0.843 blue: 0 alpha: 1];
    UIColor* textForeground = [UIColor colorWithRed: 0.087 green: 0.086 blue: 0.083 alpha: 1];

    //// Star Drawing
    UIBezierPath* starPath = [UIBezierPath bezierPath];
    [starPath moveToPoint: CGPointMake(108.7, 0.08)];
    [starPath addLineToPoint: CGPointMake(136.63, 32.2)];
    [starPath addLineToPoint: CGPointMake(178.67, 25.55)];
    [starPath addLineToPoint: CGPointMake(179.41, 68.1)];
    [starPath addLineToPoint: CGPointMake(215.9, 90.03)];
    [starPath addLineToPoint: CGPointMake(189.11, 123.11)];
    [starPath addLineToPoint: CGPointMake(202.97, 163.35)];
    [starPath addLineToPoint: CGPointMake(161.18, 171.48)];
    [starPath addLineToPoint: CGPointMake(145.93, 211.22)];
    [starPath addLineToPoint: CGPointMake(108.7, 190.58)];
    [starPath addLineToPoint: CGPointMake(71.47, 211.22)];
    [starPath addLineToPoint: CGPointMake(56.22, 171.48)];
    [starPath addLineToPoint: CGPointMake(14.43, 163.35)];
    [starPath addLineToPoint: CGPointMake(28.29, 123.11)];
    [starPath addLineToPoint: CGPointMake(1.5, 90.03)];
    [starPath addLineToPoint: CGPointMake(37.99, 68.1)];
    [starPath addLineToPoint: CGPointMake(38.73, 25.55)];
    [starPath addLineToPoint: CGPointMake(80.77, 32.2)];
    [starPath closePath];
    [fillColor setFill];
    [starPath fill];


    //// Label Drawing
    CGRect labelRect = CGRectMake(54.8, 45.93, 130.96, 54);
    {
        NSString* textContent = @"Shake";
        NSMutableParagraphStyle* labelStyle = [NSMutableParagraphStyle new];
        labelStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* labelFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica-Bold" size: 22], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: labelStyle};

        CGFloat labelTextHeight = [textContent boundingRectWithSize: CGSizeMake(labelRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: labelFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, labelRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(labelRect), CGRectGetMinY(labelRect) + (CGRectGetHeight(labelRect) - labelTextHeight) / 2, CGRectGetWidth(labelRect), labelTextHeight) withAttributes: labelFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Label 2 Drawing
    CGRect label2Rect = CGRectMake(78, 82.09, 84, 93.91);
    {
        NSString* textContent = @"me to clear display";
        NSMutableParagraphStyle* label2Style = [NSMutableParagraphStyle new];
        label2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* label2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica-Bold" size: 22.45], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label2Style};

        CGFloat label2TextHeight = [textContent boundingRectWithSize: CGSizeMake(label2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: label2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, label2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(label2Rect), CGRectGetMinY(label2Rect) + (CGRectGetHeight(label2Rect) - label2TextHeight) / 2, CGRectGetWidth(label2Rect), label2TextHeight) withAttributes: label2FontAttributes];
        CGContextRestoreGState(context);
    }
}

#pragma mark Generated Images

+ (UIImage*)imageOfMultiplypressed
{
    if (_imageOfMultiplypressed)
        return _imageOfMultiplypressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawMultiplypressed];

    _imageOfMultiplypressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMultiplypressed;
}

+ (UIImage*)imageOfMuliplynormal
{
    if (_imageOfMuliplynormal)
        return _imageOfMuliplynormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawMuliplynormal];

    _imageOfMuliplynormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMuliplynormal;
}

+ (UIImage*)imageOfDividepressed
{
    if (_imageOfDividepressed)
        return _imageOfDividepressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawDividepressed];

    _imageOfDividepressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDividepressed;
}

+ (UIImage*)imageOfDividenormal
{
    if (_imageOfDividenormal)
        return _imageOfDividenormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawDividenormal];

    _imageOfDividenormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDividenormal;
}

+ (UIImage*)imageOfAddPressed
{
    if (_imageOfAddPressed)
        return _imageOfAddPressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawAddPressed];

    _imageOfAddPressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAddPressed;
}

+ (UIImage*)imageOfAddnormal
{
    if (_imageOfAddnormal)
        return _imageOfAddnormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawAddnormal];

    _imageOfAddnormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAddnormal;
}

+ (UIImage*)imageOfMinusnormal
{
    if (_imageOfMinusnormal)
        return _imageOfMinusnormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawMinusnormal];

    _imageOfMinusnormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMinusnormal;
}

+ (UIImage*)imageOfMinusPressed
{
    if (_imageOfMinusPressed)
        return _imageOfMinusPressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawMinusPressed];

    _imageOfMinusPressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMinusPressed;
}

+ (UIImage*)imageOfOnepressed
{
    if (_imageOfOnepressed)
        return _imageOfOnepressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawOnepressed];

    _imageOfOnepressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfOnepressed;
}

+ (UIImage*)imageOfOnenormal
{
    if (_imageOfOnenormal)
        return _imageOfOnenormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawOnenormal];

    _imageOfOnenormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfOnenormal;
}

+ (UIImage*)imageOfTwonormal
{
    if (_imageOfTwonormal)
        return _imageOfTwonormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawTwonormal];

    _imageOfTwonormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTwonormal;
}

+ (UIImage*)imageOfTwopressed
{
    if (_imageOfTwopressed)
        return _imageOfTwopressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawTwopressed];

    _imageOfTwopressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTwopressed;
}

+ (UIImage*)imageOfThreepressed
{
    if (_imageOfThreepressed)
        return _imageOfThreepressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawThreepressed];

    _imageOfThreepressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfThreepressed;
}

+ (UIImage*)imageOfThreenormal
{
    if (_imageOfThreenormal)
        return _imageOfThreenormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawThreenormal];

    _imageOfThreenormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfThreenormal;
}

+ (UIImage*)imageOfFournormal
{
    if (_imageOfFournormal)
        return _imageOfFournormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawFournormal];

    _imageOfFournormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFournormal;
}

+ (UIImage*)imageOfFourpressed
{
    if (_imageOfFourpressed)
        return _imageOfFourpressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawFourpressed];

    _imageOfFourpressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFourpressed;
}

+ (UIImage*)imageOfFivenormal
{
    if (_imageOfFivenormal)
        return _imageOfFivenormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawFivenormal];

    _imageOfFivenormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFivenormal;
}

+ (UIImage*)imageOfFivepressed
{
    if (_imageOfFivepressed)
        return _imageOfFivepressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawFivepressed];

    _imageOfFivepressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFivepressed;
}

+ (UIImage*)imageOfSixpressed
{
    if (_imageOfSixpressed)
        return _imageOfSixpressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawSixpressed];

    _imageOfSixpressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSixpressed;
}

+ (UIImage*)imageOfSixnormal
{
    if (_imageOfSixnormal)
        return _imageOfSixnormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawSixnormal];

    _imageOfSixnormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSixnormal;
}

+ (UIImage*)imageOfSevenpressed
{
    if (_imageOfSevenpressed)
        return _imageOfSevenpressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawSevenpressed];

    _imageOfSevenpressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSevenpressed;
}

+ (UIImage*)imageOfSevennormal
{
    if (_imageOfSevennormal)
        return _imageOfSevennormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawSevennormal];

    _imageOfSevennormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSevennormal;
}

+ (UIImage*)imageOfEightpressed
{
    if (_imageOfEightpressed)
        return _imageOfEightpressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawEightpressed];

    _imageOfEightpressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEightpressed;
}

+ (UIImage*)imageOfEightnormal
{
    if (_imageOfEightnormal)
        return _imageOfEightnormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawEightnormal];

    _imageOfEightnormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEightnormal;
}

+ (UIImage*)imageOfNinepressed
{
    if (_imageOfNinepressed)
        return _imageOfNinepressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawNinepressed];

    _imageOfNinepressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfNinepressed;
}

+ (UIImage*)imageOfNinenormal
{
    if (_imageOfNinenormal)
        return _imageOfNinenormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawNinenormal];

    _imageOfNinenormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfNinenormal;
}

+ (UIImage*)imageOfZeronormal
{
    if (_imageOfZeronormal)
        return _imageOfZeronormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawZeronormal];

    _imageOfZeronormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfZeronormal;
}

+ (UIImage*)imageOfZeropressed
{
    if (_imageOfZeropressed)
        return _imageOfZeropressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawZeropressed];

    _imageOfZeropressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfZeropressed;
}

+ (UIImage*)imageOfCommanormal
{
    if (_imageOfCommanormal)
        return _imageOfCommanormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawCommanormal];

    _imageOfCommanormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCommanormal;
}

+ (UIImage*)imageOfCommaPressed
{
    if (_imageOfCommaPressed)
        return _imageOfCommaPressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawCommaPressed];

    _imageOfCommaPressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCommaPressed;
}

+ (UIImage*)imageOfEqualpressed
{
    if (_imageOfEqualpressed)
        return _imageOfEqualpressed;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawEqualpressed];

    _imageOfEqualpressed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEqualpressed;
}

+ (UIImage*)imageOfEqualnormal
{
    if (_imageOfEqualnormal)
        return _imageOfEqualnormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 55), NO, 0.0f);
    [StyleKitCalculator drawEqualnormal];

    _imageOfEqualnormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEqualnormal;
}

+ (UIImage*)imageOfShakeMe
{
    if (_imageOfShakeMe)
        return _imageOfShakeMe;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(218, 216), NO, 0.0f);
    [StyleKitCalculator drawShakeMe];

    _imageOfShakeMe = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfShakeMe;
}

#pragma mark Customization Infrastructure

- (void)setMultiplypressedTargets: (NSArray*)multiplypressedTargets
{
    _multiplypressedTargets = multiplypressedTargets;

    for (id target in self.multiplypressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfMultiplypressed];
}

- (void)setMuliplynormalTargets: (NSArray*)muliplynormalTargets
{
    _muliplynormalTargets = muliplynormalTargets;

    for (id target in self.muliplynormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfMuliplynormal];
}

- (void)setDividepressedTargets: (NSArray*)dividepressedTargets
{
    _dividepressedTargets = dividepressedTargets;

    for (id target in self.dividepressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfDividepressed];
}

- (void)setDividenormalTargets: (NSArray*)dividenormalTargets
{
    _dividenormalTargets = dividenormalTargets;

    for (id target in self.dividenormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfDividenormal];
}

- (void)setAddPressedTargets: (NSArray*)addPressedTargets
{
    _addPressedTargets = addPressedTargets;

    for (id target in self.addPressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfAddPressed];
}

- (void)setAddnormalTargets: (NSArray*)addnormalTargets
{
    _addnormalTargets = addnormalTargets;

    for (id target in self.addnormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfAddnormal];
}

- (void)setMinusnormalTargets: (NSArray*)minusnormalTargets
{
    _minusnormalTargets = minusnormalTargets;

    for (id target in self.minusnormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfMinusnormal];
}

- (void)setMinusPressedTargets: (NSArray*)minusPressedTargets
{
    _minusPressedTargets = minusPressedTargets;

    for (id target in self.minusPressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfMinusPressed];
}

- (void)setOnepressedTargets: (NSArray*)onepressedTargets
{
    _onepressedTargets = onepressedTargets;

    for (id target in self.onepressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfOnepressed];
}

- (void)setOnenormalTargets: (NSArray*)onenormalTargets
{
    _onenormalTargets = onenormalTargets;

    for (id target in self.onenormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfOnenormal];
}

- (void)setTwonormalTargets: (NSArray*)twonormalTargets
{
    _twonormalTargets = twonormalTargets;

    for (id target in self.twonormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfTwonormal];
}

- (void)setTwopressedTargets: (NSArray*)twopressedTargets
{
    _twopressedTargets = twopressedTargets;

    for (id target in self.twopressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfTwopressed];
}

- (void)setThreepressedTargets: (NSArray*)threepressedTargets
{
    _threepressedTargets = threepressedTargets;

    for (id target in self.threepressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfThreepressed];
}

- (void)setThreenormalTargets: (NSArray*)threenormalTargets
{
    _threenormalTargets = threenormalTargets;

    for (id target in self.threenormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfThreenormal];
}

- (void)setFournormalTargets: (NSArray*)fournormalTargets
{
    _fournormalTargets = fournormalTargets;

    for (id target in self.fournormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfFournormal];
}

- (void)setFourpressedTargets: (NSArray*)fourpressedTargets
{
    _fourpressedTargets = fourpressedTargets;

    for (id target in self.fourpressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfFourpressed];
}

- (void)setFivenormalTargets: (NSArray*)fivenormalTargets
{
    _fivenormalTargets = fivenormalTargets;

    for (id target in self.fivenormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfFivenormal];
}

- (void)setFivepressedTargets: (NSArray*)fivepressedTargets
{
    _fivepressedTargets = fivepressedTargets;

    for (id target in self.fivepressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfFivepressed];
}

- (void)setSixpressedTargets: (NSArray*)sixpressedTargets
{
    _sixpressedTargets = sixpressedTargets;

    for (id target in self.sixpressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfSixpressed];
}

- (void)setSixnormalTargets: (NSArray*)sixnormalTargets
{
    _sixnormalTargets = sixnormalTargets;

    for (id target in self.sixnormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfSixnormal];
}

- (void)setSevenpressedTargets: (NSArray*)sevenpressedTargets
{
    _sevenpressedTargets = sevenpressedTargets;

    for (id target in self.sevenpressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfSevenpressed];
}

- (void)setSevennormalTargets: (NSArray*)sevennormalTargets
{
    _sevennormalTargets = sevennormalTargets;

    for (id target in self.sevennormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfSevennormal];
}

- (void)setEightpressedTargets: (NSArray*)eightpressedTargets
{
    _eightpressedTargets = eightpressedTargets;

    for (id target in self.eightpressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfEightpressed];
}

- (void)setEightnormalTargets: (NSArray*)eightnormalTargets
{
    _eightnormalTargets = eightnormalTargets;

    for (id target in self.eightnormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfEightnormal];
}

- (void)setNinepressedTargets: (NSArray*)ninepressedTargets
{
    _ninepressedTargets = ninepressedTargets;

    for (id target in self.ninepressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfNinepressed];
}

- (void)setNinenormalTargets: (NSArray*)ninenormalTargets
{
    _ninenormalTargets = ninenormalTargets;

    for (id target in self.ninenormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfNinenormal];
}

- (void)setZeronormalTargets: (NSArray*)zeronormalTargets
{
    _zeronormalTargets = zeronormalTargets;

    for (id target in self.zeronormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfZeronormal];
}

- (void)setZeropressedTargets: (NSArray*)zeropressedTargets
{
    _zeropressedTargets = zeropressedTargets;

    for (id target in self.zeropressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfZeropressed];
}

- (void)setCommanormalTargets: (NSArray*)commanormalTargets
{
    _commanormalTargets = commanormalTargets;

    for (id target in self.commanormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfCommanormal];
}

- (void)setCommaPressedTargets: (NSArray*)commaPressedTargets
{
    _commaPressedTargets = commaPressedTargets;

    for (id target in self.commaPressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfCommaPressed];
}

- (void)setEqualpressedTargets: (NSArray*)equalpressedTargets
{
    _equalpressedTargets = equalpressedTargets;

    for (id target in self.equalpressedTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfEqualpressed];
}

- (void)setEqualnormalTargets: (NSArray*)equalnormalTargets
{
    _equalnormalTargets = equalnormalTargets;

    for (id target in self.equalnormalTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfEqualnormal];
}

- (void)setShakeMeTargets: (NSArray*)shakeMeTargets
{
    _shakeMeTargets = shakeMeTargets;

    for (id target in self.shakeMeTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKitCalculator.imageOfShakeMe];
}


@end
